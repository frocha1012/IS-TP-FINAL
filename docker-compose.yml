

services:

  # Database to store XML data
  db-xml:
    container_name: db-xml
    build: docker/images/db/xml
    volumes:
      - xml-data:/var/lib/postgresql/shared-data/
    ports:
      - "${EXP_PORT_PG_XML}:5432"

  # Database to store Relational data
  db-rel:
    container_name: db-rel
    build: docker/images/db/rel
    volumes:
      - rel-data:/var/lib/postgresql/shared-data/
    ports:
      - "${EXP_PORT_PG_REL}:5432"

  # Container that automatically converts CSV to XML and then imports the XML to db-xml
  importer:
    container_name: importer
    build: docker/images/python
    volumes:
      - ./src/daemon/importer:/usr/src/app
      - ./docker/volumes/xml:/xml
      - ./docker/volumes/csv:/csv
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}
      NUM_XML_PARTS: ${NUM_XML_PARTS}
    depends_on:
      - db-xml

  # Container that automatically migrates data from db-xml to db-rel

  migrator:
    container_name: migrator
    build: ./src/daemon/migrator  # Path to your Dockerfile
    depends_on:
      - db-xml
      - db-rel
      - broker
    environment:
      PG_XML_CONN_STR: "postgresql://is:is@db-xml:5432/is"  # Connection string for pg-xml
      PG_REL_CONN_STR: "postgresql://is:is@db-rel:5432/is"  # Connection string for pg-rel
      RABBITMQ_HOST: broker  # Hostname for RabbitMQ
      RABBITMQ_USER: is  # Username for RabbitMQ
      RABBITMQ_PASS: is  # Password for RabbitMQ
      RABBITMQ_VHOST: is  # Virtual host for RabbitMQ
    volumes:
      - ./src/daemon/migrator:/usr/src/app

  # Container that automatically migrates data from db-xml to db-rel
  gis-updater:
    container_name: gis-updater
    build: 
      context: ./src/daemon/gis-updater
    volumes:
      - ./src/daemon/gis-updater:/usr/src/app
      - ./docker/volumes/xml:/xml
    environment:
      - USE_DEV_MODE=${USE_DEV_MODE}
      - POLLING_FREQ=${POLLING_FREQ}
      - ENTITIES_PER_ITERATION=${ENTITIES_PER_ITERATION}
      - API_GIS_BASE_URL=${API_GIS_BASE_URL}
    depends_on:
      - api-gis

  # Container that runs the RPC server
  rpc-server:
    container_name: rpc-server
    build: docker/images/python
    volumes:
      - ./src/server/rpc:/usr/src/app
      - ./docker/volumes/xml:/xml
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}
      RPC_SERVER_PORT: ${RPC_SERVER_PORT}
    depends_on:
      - db-xml

  # Container that runs the web interface for displaying entities
  frontend-ent:
    container_name: frontend-ent
    build: docker/images/web
    volumes:
      - ./src/frontend/ent:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_PORT_FRONTEND_ENT}:${EXT_PORT_FRONTEND_ENT}"
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}
      WEB_PORT: ${EXT_PORT_FRONTEND_ENT}
      API_ENTITIES_URL: "localhost:${EXT_PORT_API_ENTITIES}"
    depends_on:
      - api-entities

  # Container that runs the web interface for displaying the map
  frontend-gis:
    container_name: frontend-gis
    build: docker/images/web
    volumes:
      - ./src/frontend/gis:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_PORT_FRONTEND_GIS}:${EXT_PORT_FRONTEND_GIS}"
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}
      WEB_PORT: ${EXT_PORT_FRONTEND_GIS}
      API_GIS_URL: "localhost:${EXT_PORT_API_GIS}"
    depends_on:
      - api-gis

  # Container that runs the web interface for displaying the map
  frontend-proc:
    container_name: frontend-proc
    build: docker/images/web
    volumes:
      - ./src/frontend/proc:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_PORT_FRONTEND_PROC}:${EXT_PORT_FRONTEND_PROC}"
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}
      WEB_PORT: ${EXT_PORT_FRONTEND_PROC}
      API_GRAPHQL_URL: "localhost:${EXT_PORT_API_GRAPHQL}"
      API_PROC_URL: "localhost:${EXT_PORT_API_PROC}"
    depends_on:
      - api-proc
      - api-graphql

  # Container that runs the API for entities
  api-entities:
    container_name: api-entities
    build: docker/images/javascript
    volumes:
      - ./src/api/entities:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_PORT_API_ENTITIES}:${API_PORT}"
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}
      PORT: ${API_PORT}
      DATABASE_URL: postgresql://is:is@db-rel:5432/is?schema=public
    depends_on:
      - db-rel

  # Container that runs the API for gis
  api-gis:
    container_name: api-gis
    build: 
      context: ./src/api/gis  # Path to your Dockerfile directory
    volumes:
      - ./src/api/gis:/usr/src/app  # Ensure this path points to your Flask app directory
      - ./docker/volumes/xml:/xml  # Only add this if you need to access XML files in your app
    ports:
      - "${EXT_PORT_API_GIS}:8080"  # Maps the external port to the internal port
    environment:
      - PG_REL_CONN_STR=${PG_REL_CONN_STR}  # Database connection string, ensure this is set in your environment
      - API_PORT=${API_PORT}  # Flask application port
    depends_on:
      - db-rel

  # Container that runs the API for procedures
  api-proc:
    container_name: api-proc
    build: docker/images/python
    volumes:
      - ./src/api/proc:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_PORT_API_PROC}:${API_PORT}"
    environment:
      API_PORT: ${API_PORT}

  # Container that runs the API for graphql
  api-graphql:
    container_name: api-graphql
    build: docker/images/python
    volumes:
      - ./src/api/graphql:/usr/src/app
      - ./docker/volumes/xml:/xml
    ports:
      - "${EXT_PORT_API_GRAPHQL}:${API_PORT}"
    environment:
      API_PORT: ${API_PORT}

  # Container that runs a golang exmaple
  golang-example:
    container_name: golang-example
    build: docker/images/golang
    volumes:
      - ./src/examples/golang:/usr/src/app
      - ./docker/volumes/xml:/xml
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}

  # Container that runs a elixir exmaple
  elixir-example:
    container_name: elixir-example
    build: docker/images/elixir
    volumes:
      - ./src/examples/elixir:/usr/src/app
      - ./docker/volumes/xml:/xml
    environment:
      USE_DEV_MODE: ${USE_DEV_MODE}

  broker:
    container_name: rabbitmq
    image: "rabbitmq:3.12.9-management-alpine"
    environment:
      RABBITMQ_DEFAULT_USER: "$RABBITMQ_DEFAULT_USER"
      RABBITMQ_DEFAULT_PASS: "$RABBITMQ_DEFAULT_PASS"
      RABBITMQ_DEFAULT_VHOST: "$RABBITMQ_DEFAULT_VHOST"
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # management interface port
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping", "-q" ]
      interval: 30s
      timeout: 10s
      retries: 5

  watcher:
    build: ./src/daemon/watcher
    depends_on:
      - broker  # Assuming 'broker' is the service name for RabbitMQ
      - db-xml  # And you have a service for your pg-xml database
    volumes:
      - ./src/daemon/watcher:/usr/src/app



volumes:
  xml-data:
  rel-data:
